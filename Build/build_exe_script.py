#!/usr/bin/env python3
"""
Script ƒë·ªÉ build file EXE cho Campus Analysis GUI
"""

import os
import subprocess
import sys
from pathlib import Path

def check_requirements():
    """Ki·ªÉm tra c√°c package c·∫ßn thi·∫øt"""
    print("üîç Ki·ªÉm tra requirements...")
    
    required_packages = [
        "PyQt5", "pandas", "numpy", "openpyxl", 
        "xlsxwriter", "folium", "shapely", "geopy", "pyinstaller"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.lower().replace("-", "_"))
            print(f"  ‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"  ‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ùå Thi·∫øu packages: {', '.join(missing_packages)}")
        print("Ch·∫°y: pip install -r requirements.txt")
        return False
    
    return True

def create_spec_file():
    """T·∫°o file .spec cho PyInstaller"""
    print("\nüìù T·∫°o file .spec...")
    
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['campus_gui.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('01_load_data_selection.py', '.'),
        ('02_compute_coverage.py', '.'),
        ('03_overlap_matrix.py', '.'),
        ('04_tam_analysis.py', '.'),
        ('05_generate_map.py', '.'),
        ('06_export_excel.py', '.'),
        ('campus_icon.png', '.'),
    ],
    hiddenimports=[
        'pandas._libs.tslibs.timedeltas',
        'pandas._libs.tslibs.np_datetime',
        'pandas._libs.tslibs.nattype',
        'pandas._libs.missing',
        'folium.plugins',
        'shapely.geometry',
        'geopy.distance',
        'xlsxwriter.workbook',
        'openpyxl.chart',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='CampusAnalysisPro',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='campus_icon.ico'
)
'''
    
    with open('campus_analysis.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("  ‚úÖ ƒê√£ t·∫°o campus_analysis.spec")

def create_icon():
    """T·∫°o icon m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥"""
    icon_path = Path("campus_icon.png")
    ico_path = Path("campus_icon.ico")
    
    if not icon_path.exists():
        print("\nüé® T·∫°o icon m·∫∑c ƒë·ªãnh...")
        # T·∫°o icon ƒë∆°n gi·∫£n b·∫±ng PIL n·∫øu c√≥
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # T·∫°o image 64x64
            img = Image.new('RGBA', (64, 64), (52, 152, 219, 255))
            draw = ImageDraw.Draw(img)
            
            # V·∫Ω bi·ªÉu t∆∞·ª£ng campus ƒë∆°n gi·∫£n
            draw.rectangle([10, 20, 54, 50], fill=(255, 255, 255, 255))
            draw.rectangle([20, 25, 25, 35], fill=(52, 152, 219, 255))
            draw.rectangle([30, 25, 35, 35], fill=(52, 152, 219, 255))
            draw.rectangle([40, 25, 45, 35], fill=(52, 152, 219, 255))
            draw.rectangle([25, 40, 40, 45], fill=(52, 152, 219, 255))
            
            img.save("campus_icon.png")
            print("  ‚úÖ ƒê√£ t·∫°o campus_icon.png")
            
            # Convert to ICO
            img.save("campus_icon.ico", format='ICO')
            print("  ‚úÖ ƒê√£ t·∫°o campus_icon.ico")
            
        except ImportError:
            # T·∫°o file placeholder
            with open("campus_icon.png", "w") as f:
                f.write("")
            with open("campus_icon.ico", "w") as f:
                f.write("")
            print("  ‚ö†Ô∏è  T·∫°o placeholder icon (c·∫ßn PIL ƒë·ªÉ t·∫°o icon th·∫≠t)")

def build_exe():
    """Build file EXE"""
    print("\nüî® B·∫Øt ƒë·∫ßu build EXE...")
    
    # T·∫°o th∆∞ m·ª•c dist n·∫øu c·∫ßn
    os.makedirs("dist", exist_ok=True)
    
    # Ch·∫°y PyInstaller
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--clean",
        "--noconfirm", 
        "campus_analysis.spec"
    ]
    
    print(f"Ch·∫°y: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Build th√†nh c√¥ng!")
            
            # Ki·ªÉm tra file exe
            exe_path = Path("dist/CampusAnalysisPro.exe")
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"üìÅ File EXE: {exe_path} ({size_mb:.1f} MB)")
                return True
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y file EXE sau khi build")
                return False
        else:
            print("‚ùå Build th·∫•t b·∫°i!")
            print("STDOUT:", result.stdout)
            print("STDERR:", result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi build: {e}")
        return False

def copy_required_files():
    """Copy c√°c file c·∫ßn thi·∫øt v√†o th∆∞ m·ª•c dist"""
    print("\nüìÇ Copy files c·∫ßn thi·∫øt...")
    
    dist_path = Path("dist")
    
    # T·∫°o th∆∞ m·ª•c Input trong dist
    input_dir = dist_path / "Input"
    input_dir.mkdir(exist_ok=True)
    
    # Copy sample data files (n·∫øu c√≥)
    sample_files = [
        "Campuses_with_latlon.xlsx",
        "Students_with_latlon.xlsx", 
        "Public_Schools_with_latlon.xlsx"
    ]
    
    source_input = Path("Input")
    if source_input.exists():
        for file in sample_files:
            src = source_input / file
            dst = input_dir / file
            if src.exists():
                import shutil
                shutil.copy2(src, dst)
                print(f"  ‚úÖ {file}")
            else:
                print(f"  ‚ö†Ô∏è  {file} - kh√¥ng t√¨m th·∫•y")
    
    # T·∫°o th∆∞ m·ª•c Output
    output_dir = dist_path / "Output"
    output_dir.mkdir(exist_ok=True)
    print(f"  ‚úÖ T·∫°o th∆∞ m·ª•c Output")
    
    # Copy README
    readme_content = """
# Campus Analysis Pro

## H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:

1. ƒê·∫∑t c√°c file Excel v√†o th∆∞ m·ª•c Input/:
   - Campuses_with_latlon.xlsx
   - Students_with_latlon.xlsx  
   - Public_Schools_with_latlon.xlsx

2. Ch·∫°y CampusAnalysisPro.exe

3. C·∫•u h√¨nh tham s·ªë v√† campus

4. Nh·∫•n "B·∫Øt ƒë·∫ßu ph√¢n t√≠ch"

5. Xem k·∫øt qu·∫£ trong th∆∞ m·ª•c Output/

## L∆∞u √Ω:
- C·∫ßn c√≥ ƒë·ªß 3 file Excel ƒë·∫ßu v√†o
- K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c Output
- C√≥ th·ªÉ l∆∞u/load c·∫•u h√¨nh b·∫±ng file JSON

## Li√™n h·ªá h·ªó tr·ª£:
- Email: support@campusanalysis.com
- Website: www.campusanalysis.com
"""
    
    with open(dist_path / "README.txt", "w", encoding="utf-8") as f:
        f.write(readme_content)
    print(f"  ‚úÖ README.txt")

def main():
    """H√†m main"""
    print("üöÄ CAMPUS ANALYSIS PRO - BUILD EXE")
    print("=" * 50)
    
    # Check requirements
    if not check_requirements():
        return False
    
    # Create icon
    create_icon()
    
    # Create spec file
    create_spec_file()
    
    # Build EXE
    if not build_exe():
        return False
    
    # Copy required files
    copy_required_files()
    
    print("\n" + "=" * 50)
    print("üéâ BUILD HO√ÄN T·∫§T!")
    print("=" * 50)
    
    print("\nüìÅ C√°c file ƒë√£ t·∫°o:")
    print("  ‚Ä¢ dist/CampusAnalysisPro.exe - File th·ª±c thi ch√≠nh")
    print("  ‚Ä¢ dist/Input/ - Th∆∞ m·ª•c cho file Excel ƒë·∫ßu v√†o")
    print("  ‚Ä¢ dist/Output/ - Th∆∞ m·ª•c cho k·∫øt qu·∫£")
    print("  ‚Ä¢ dist/README.txt - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
    
    print("\nüí° H∆∞·ªõng d·∫´n tri·ªÉn khai:")
    print("  1. Copy to√†n b·ªô th∆∞ m·ª•c dist/ cho ng∆∞·ªùi d√πng")
    print("  2. ƒê·∫∑t file Excel v√†o dist/Input/")
    print("  3. Ch·∫°y dist/CampusAnalysisPro.exe")
    
    print("\n‚úÖ S·∫µn s√†ng s·ª≠ d·ª•ng!")
    
    return True

if __name__ == "__main__":
    success = main()
    input(f"\n{'‚úÖ Nh·∫•n Enter ƒë·ªÉ tho√°t...' if success else '‚ùå C√≥ l·ªói. Nh·∫•n Enter ƒë·ªÉ tho√°t...'}")
