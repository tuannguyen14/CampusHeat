import pandas as pd
import numpy as np
import os
import math

print("üìÇ ƒêang load d·ªØ li·ªáu t·ª´ c√°c file Excel v·ªõi CAMPUS SELECTION...")

# L·∫•y c·∫•u h√¨nh t·ª´ main.py
STUDENTS_PER_ROOM = globals().get('STUDENTS_PER_ROOM', 100)
USE_CAMPUS_SELECTION = globals().get('USE_CAMPUS_SELECTION', False)
SELECTED_CAMPUSES = globals().get('SELECTED_CAMPUSES', [])
NEW_CAMPUSES = globals().get('NEW_CAMPUSES', [])

print(f"üîß Campus selection mode: {'‚úÖ ENABLED' if USE_CAMPUS_SELECTION else '‚ùå DISABLED'}")

# Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c Input n·∫øu c·∫ßn
input_dir = "./Input"
if not os.path.exists(input_dir):
    input_dir = "."
    print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c Input, s·ª≠ d·ª•ng th∆∞ m·ª•c hi·ªán t·∫°i")

# ============================================================================
# LOAD D·ªÆ LI·ªÜU CAMPUS V·ªöI SELECTION
# ============================================================================

try:
    # Load to√†n b·ªô campus t·ª´ Excel
    full_campuses_df = pd.read_excel(f"{input_dir}/Campuses_with_latlon.xlsx")
    full_campuses_df['Campus Code'] = full_campuses_df['Campus Code'].astype(str).str.strip()
    print(f"üìã Loaded {len(full_campuses_df)} campus t·ª´ Excel")
    
    # Hi·ªÉn th·ªã danh s√°ch campus c√≥ s·∫µn
    available_campuses = sorted(full_campuses_df['Campus Code'].unique())
    print(f"   Available campus codes: {available_campuses}")
    
    if USE_CAMPUS_SELECTION:
        print(f"\nüéØ CAMPUS SELECTION MODE:")
        
        # ===== FILTER CAMPUS T·ª™ EXCEL =====
        selected_from_excel = []
        if SELECTED_CAMPUSES:
            print(f"üìã Filtering campus t·ª´ Excel...")
            for campus_code in SELECTED_CAMPUSES:
                campus_data = full_campuses_df[full_campuses_df['Campus Code'] == campus_code]
                if not campus_data.empty:
                    selected_from_excel.append(campus_data.iloc[0])
                    print(f"   ‚úÖ Found: {campus_code}")
                else:
                    print(f"   ‚ùå Not found: {campus_code}")
                    print(f"      Available: {available_campuses}")
        
        # Convert to DataFrame
        if selected_from_excel:
            selected_campuses_df = pd.DataFrame(selected_from_excel)
        else:
            selected_campuses_df = pd.DataFrame(columns=full_campuses_df.columns)
        
        print(f"   üìä Selected from Excel: {len(selected_campuses_df)} campus")
        
        # ===== TH√äM CAMPUS M·ªöI =====
        new_campuses_list = []
        if NEW_CAMPUSES:
            print(f"üÜï Adding new campus...")
            for campus_info in NEW_CAMPUSES:
                # Validate required fields
                required_fields = ['Campus Code', 'Campus Name', 'lat', 'lon', 'S·ªë ph√≤ng h·ªçc']
                if all(field in campus_info for field in required_fields):
                    # T·∫°o campus record
                    new_campus = {
                        'Campus Code': str(campus_info['Campus Code']).strip(),
                        'Campus Name': campus_info['Campus Name'],
                        'lat': float(campus_info['lat']),
                        'lon': float(campus_info['lon']),
                        'S·ªë ph√≤ng h·ªçc': int(campus_info['S·ªë ph√≤ng h·ªçc'])
                    }
                    
                    # Copy other columns from template (if exists)
                    if not full_campuses_df.empty:
                        template = full_campuses_df.iloc[0].to_dict()
                        for col in template:
                            if col not in new_campus:
                                new_campus[col] = template[col] if pd.notna(template[col]) else None
                    
                    new_campuses_list.append(new_campus)
                    print(f"   ‚úÖ Added: {new_campus['Campus Code']} - {new_campus['Campus Name']}")
                    print(f"      üìç Coordinates: ({new_campus['lat']}, {new_campus['lon']})")
                    print(f"      üè¢ Rooms: {new_campus['S·ªë ph√≤ng h·ªçc']}")
                else:
                    missing = [f for f in required_fields if f not in campus_info]
                    print(f"   ‚ùå Invalid campus config: missing {missing}")
        
        # Convert new campuses to DataFrame
        if new_campuses_list:
            new_campuses_df = pd.DataFrame(new_campuses_list)
        else:
            new_campuses_df = pd.DataFrame(columns=full_campuses_df.columns)
        
        print(f"   üìä New campus added: {len(new_campuses_df)} campus")
        
        # ===== K·∫æT H·ª¢P CAMPUS =====
        if not selected_campuses_df.empty and not new_campuses_df.empty:
            campuses_df = pd.concat([selected_campuses_df, new_campuses_df], ignore_index=True)
        elif not selected_campuses_df.empty:
            campuses_df = selected_campuses_df
        elif not new_campuses_df.empty:
            campuses_df = new_campuses_df
        else:
            print("‚ùå Kh√¥ng c√≥ campus n√†o ƒë∆∞·ª£c ch·ªçn!")
            campuses_df = pd.DataFrame(columns=full_campuses_df.columns)
        
        print(f"\nüìä FINAL CAMPUS LIST ({len(campuses_df)} campus):")
        for _, campus in campuses_df.iterrows():
            source = "üìã Excel" if campus['Campus Code'] in SELECTED_CAMPUSES else "üÜï New"
            print(f"   {source}: {campus['Campus Code']} - {campus['Campus Name']}")
    
    else:
        # S·ª≠ d·ª•ng t·∫•t c·∫£ campus (ch·∫ø ƒë·ªô c≈©)
        campuses_df = full_campuses_df.copy()
        print(f"üìã Using ALL campus from Excel: {len(campuses_df)} campus")
    
    # Chu·∫©n h√≥a d·ªØ li·ªáu campus
    campuses_df['Campus Code'] = campuses_df['Campus Code'].astype(str).str.strip()
    campus_codes = [str(code).strip() for code in campuses_df['Campus Code'].unique()]
    
    print(f"‚úÖ Final campus codes: {campus_codes}")
    
    # ƒê·∫£m b·∫£o c√≥ c√°c c·ªôt c·∫ßn thi·∫øt
    required_cols = ['Campus Code', 'Campus Name', 'lat', 'lon']
    missing_cols = [col for col in required_cols if col not in campuses_df.columns]
    if missing_cols:
        print(f"‚ö†Ô∏è  Thi·∫øu c·ªôt: {missing_cols}")
    
    # T√≠nh capacity t·ª´ s·ªë ph√≤ng h·ªçc
    if 'S·ªë ph√≤ng h·ªçc' in campuses_df.columns:
        campuses_df['capacity'] = campuses_df['S·ªë ph√≤ng h·ªçc'].fillna(8) * STUDENTS_PER_ROOM
    else:
        print("‚ö†Ô∏è  Kh√¥ng c√≥ c·ªôt 'S·ªë ph√≤ng h·ªçc', s·ª≠ d·ª•ng default 8 ph√≤ng/campus")
        campuses_df['capacity'] = 8 * STUDENTS_PER_ROOM
    
    print(f"‚úÖ Campus capacity calculated based on {STUDENTS_PER_ROOM} students/room")
    
except FileNotFoundError:
    print("‚ùå Kh√¥ng t√¨m th·∫•y file Campuses_with_latlon.xlsx")
    exit()
except Exception as e:
    print(f"‚ùå L·ªói khi load campus data: {e}")
    exit()

# ============================================================================
# LOAD D·ªÆ LI·ªÜU H·ªåC VI√äN (KH√îNG THAY ƒê·ªîI)
# ============================================================================

try:
    students_df = pd.read_excel(f"{input_dir}/Students_with_latlon.xlsx")
    # Chu·∫©n h√≥a studycampuscode
    if 'studycampuscode' in students_df.columns:
        students_df['studycampuscode'] = students_df['studycampuscode'].astype(str).str.strip()
    print(f"‚úÖ Students: {len(students_df)} records")
except FileNotFoundError:
    print("‚ùå Kh√¥ng t√¨m th·∫•y file Students_with_latlon.xlsx")
    exit()

# ============================================================================
# LOAD D·ªÆ LI·ªÜU TR∆Ø·ªúNG C√îNG (KH√îNG THAY ƒê·ªîI)
# ============================================================================

try:
    schools_df = pd.read_excel(f"{input_dir}/Public_Schools_with_latlon.xlsx")
    schools_df['T√™n tr∆∞·ªùng'] = schools_df['T√™n tr∆∞·ªùng'].astype(str)
    print(f"‚úÖ Public Schools: {len(schools_df)} records")
    
    # ƒê·∫£m b·∫£o c√≥ c·ªôt s·ªë h·ªçc sinh
    if 'T·ªïng h·ªçc sinh 2023' not in schools_df.columns:
        print("‚ö†Ô∏è  Kh√¥ng c√≥ c·ªôt 'T·ªïng h·ªçc sinh 2023', t·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh")
        schools_df['T·ªïng h·ªçc sinh 2023'] = 500
        
except FileNotFoundError:
    print("‚ùå Kh√¥ng t√¨m th·∫•y file Public_Schools_with_latlon.xlsx")
    exit()

# ============================================================================
# T·∫†O TRANSFER SUGGESTION CHO CAMPUS ƒê√É CH·ªåN
# ============================================================================

print("‚ö†Ô∏è  B·ªè qua t·∫°o transfer suggestion - s·∫Ω t·∫°o on-demand n·∫øu c·∫ßn")
transfer_df = pd.DataFrame()  # Empty for now

# ============================================================================
# HI·ªÇN th·ªã TH√îNG TIN C·∫§U TR√öC D·ªÆ LI·ªÜU
# ============================================================================

print("\nüìã C·∫•u tr√∫c d·ªØ li·ªáu:")
print("=" * 70)

# Th√¥ng tin campus ƒë∆∞·ª£c ch·ªçn
print(f"\nüè´ CAMPUSES ({len(campuses_df)} campus ƒë∆∞·ª£c ch·ªçn):")
print(f"Columns: {list(campuses_df.columns)}")

for idx, row in campuses_df.iterrows():
    campus_code = row.get('Campus Code', 'N/A')
    campus_name = row.get('Campus Name', 'N/A')
    capacity = row.get('capacity', 0)
    rooms = capacity // STUDENTS_PER_ROOM
    source = "üìã Excel" if campus_code in SELECTED_CAMPUSES else "üÜï New"
    
    print(f"  {source} {campus_code}: {campus_name}")
    print(f"    üìç T·ªça ƒë·ªô: ({row.get('lat', 'N/A')}, {row.get('lon', 'N/A')})")
    print(f"    üìö Capacity: {capacity:,} h·ªçc vi√™n ({rooms} ph√≤ng)")

# Th·ªëng k√™ h·ªçc vi√™n theo campus ƒë∆∞·ª£c ch·ªçn
print(f"\nüë®‚Äçüéì STUDENTS DISTRIBUTION (filtered by selected campus):")
if 'studycampuscode' in students_df.columns:
    # Ch·ªâ th·ªëng k√™ h·ªçc vi√™n thu·ªôc campus ƒë∆∞·ª£c ch·ªçn
    valid_student_counts = students_df[students_df['studycampuscode'].isin(campus_codes)]['studycampuscode'].value_counts()
    print(f"  H·ªçc vi√™n thu·ªôc campus ƒë∆∞·ª£c ch·ªçn ({len(valid_student_counts)} campus):")
    for campus_code, count in valid_student_counts.items():
        campus_name = campuses_df[campuses_df['Campus Code'] == campus_code]['Campus Name'].iloc[0] if len(campuses_df[campuses_df['Campus Code'] == campus_code]) > 0 else 'Unknown'
        print(f"  - {campus_code} ({campus_name}): {count:,} h·ªçc vi√™n")
    
    # Th·ªëng k√™ h·ªçc vi√™n NOT thu·ªôc campus ƒë∆∞·ª£c ch·ªçn  
    invalid_students = students_df[~students_df['studycampuscode'].isin(campus_codes)]
    if len(invalid_students) > 0:
        print(f"\n  H·ªçc vi√™n thu·ªôc campus kh√°c (kh√¥ng ƒë∆∞·ª£c ch·ªçn): {len(invalid_students)}")
        invalid_counts = invalid_students['studycampuscode'].value_counts()
        for campus_code, count in invalid_counts.head(5).items():
            print(f"  - {campus_code}: {count:,} h·ªçc vi√™n")
        if len(invalid_counts) > 5:
            print(f"  - ... v√† {len(invalid_counts) - 5} campus kh√°c")
    
    total_selected_students = valid_student_counts.sum() if len(valid_student_counts) > 0 else 0
    total_other_students = len(invalid_students)
    print(f"\n  üìä Summary:")
    print(f"     ‚Ä¢ Students in selected campus: {total_selected_students:,}")
    print(f"     ‚Ä¢ Students in other campus: {total_other_students:,}")
    print(f"     ‚Ä¢ Total students: {len(students_df):,}")
    
else:
    print("  ‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin campus c·ªßa h·ªçc vi√™n")

# Th√¥ng tin tr∆∞·ªùng c√¥ng (kh√¥ng thay ƒë·ªïi)
print(f"\nüè´ PUBLIC SCHOOLS: {len(schools_df)} tr∆∞·ªùng")
total_public_students = schools_df['T·ªïng h·ªçc sinh 2023'].sum()
print(f"  - T·ªïng h·ªçc sinh: {total_public_students:,}")
print(f"  - Trung b√¨nh: {schools_df['T·ªïng h·ªçc sinh 2023'].mean():.0f} h·ªçc sinh/tr∆∞·ªùng")

# Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu campus ƒë∆∞·ª£c ch·ªçn
print("\nüîç Ki·ªÉm tra d·ªØ li·ªáu campus ƒë∆∞·ª£c ch·ªçn:")

# Ki·ªÉm tra t·ªça ƒë·ªô campus
invalid_campus_coords = campuses_df[
    campuses_df['lat'].isna() | campuses_df['lon'].isna() |
    (campuses_df['lat'] == 0) | (campuses_df['lon'] == 0)
]
if len(invalid_campus_coords) > 0:
    print(f"  ‚ö†Ô∏è {len(invalid_campus_coords)} campus thi·∫øu t·ªça ƒë·ªô h·ª£p l·ªá:")
    for _, campus in invalid_campus_coords.iterrows():
        print(f"     - {campus['Campus Code']}: ({campus.get('lat', 'N/A')}, {campus.get('lon', 'N/A')})")
else:
    print("  ‚úÖ T·∫•t c·∫£ campus ƒë∆∞·ª£c ch·ªçn c√≥ t·ªça ƒë·ªô h·ª£p l·ªá")