#!/usr/bin/env python3
"""Generate interactive map with COMPLETE VALIDATION"""

import folium
from folium import plugins
import pandas as pd
import numpy as np
from shapely.geometry import MultiPoint
from geopy.distance import geodesic
import os

# ===============================================================================
# IMPORT VALIDATION MODULE (ƒê√É S·ª¨A)
# ===============================================================================

def calculate_distance_strict(lat1, lon1, lat2, lon2):
    """T√≠nh kho·∫£ng c√°ch ch·∫∑t ch·∫Ω"""
    try:
        if pd.isna(lat1) or pd.isna(lon1) or pd.isna(lat2) or pd.isna(lon2):
            return float('inf')
        return geodesic((float(lat1), float(lon1)), (float(lat2), float(lon2))).km
    except:
        return float('inf')

def validate_and_clean_school_classification(school_classification, campuses_df, schools_df, radius_km):
    """Validation 1: ƒê√É S·ª¨A ƒë·ªÉ bao g·ªìm th√¥ng tin v·ªã tr√≠"""
    print("üîç VALIDATION 1: L·ªçc school_classification...")
    
    cleaned_classification = {}
    stats = {'removed': 0, 'reclassified': 0, 'kept': 0}
    
    # T·∫°o dictionary mapping ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n
    school_coords = {row['T√™n tr∆∞·ªùng']: (row['lat'], row['lon'], row.get('T·ªïng h·ªçc sinh 2023', 0)) 
                    for _, row in schools_df.iterrows()}
    
    for school_name, classification in school_classification.items():
        if school_name not in school_coords:
            stats['removed'] += 1
            continue
            
        school_lat, school_lon, school_students = school_coords[school_name]
        
        if pd.isna(school_lat) or pd.isna(school_lon):
            stats['removed'] += 1
            continue
        
        # Ki·ªÉm tra kho·∫£ng c√°ch ƒë·∫øn t·ª´ng campus
        assigned_campuses = classification.get('campuses', [])
        valid_campuses = []
        
        for campus_code in assigned_campuses:
            campus_data = campuses_df[campuses_df['Campus Code'] == campus_code]
            if campus_data.empty:
                continue
            
            campus = campus_data.iloc[0]
            distance = calculate_distance_strict(
                school_lat, school_lon,
                campus['lat'], campus['lon']
            )
            
            if distance <= radius_km:
                valid_campuses.append(campus_code)
        
        # X√°c ƒë·ªãnh lo·∫°i tr∆∞·ªùng
        old_type = classification.get('type', 'unknown')
        
        if len(valid_campuses) == 0:
            stats['removed'] += 1
        else:
            new_type = 'exclusive' if len(valid_campuses) == 1 else 'shared'
            
            if old_type != new_type:
                stats['reclassified'] += 1
            else:
                stats['kept'] += 1
            
            # TH√äM TH√îNG TIN V·ªä TR√ç V√Ä H·ªåC SINH
            cleaned_classification[school_name] = {
                'type': new_type,
                'campuses': valid_campuses,
                'lat': school_lat,
                'lon': school_lon,
                'students': school_students
            }
    
    print(f"   üìä Removed: {stats['removed']}, Reclassified: {stats['reclassified']}, Kept: {stats['kept']}")
    return cleaned_classification

# ===============================================================================
# MAIN VALIDATION & MAP CREATION (ƒê√É S·ª¨A)
# ===============================================================================

# ... (ph·∫ßn kh·ªüi t·∫°o b·∫£n ƒë·ªì gi·ªØ nguy√™n)

# Th√™m school markers (ƒê√É T·ªêI ∆ØU)
print("üè´ Th√™m school markers (validated only)...")
schools_added = 0
validation_errors = 0

for school_name, classification in school_classification.items():
    school_type = classification['type']
    covering_campuses = classification['campuses']
    lat, lon = classification['lat'], classification['lon']
    students = classification.get('students', 0)
    
    # SAFETY CHECK: Verify logic consistency
    if len(covering_campuses) == 1 and school_type != 'exclusive':
        validation_errors += 1
        school_type = 'exclusive'
    elif len(covering_campuses) > 1 and school_type != 'shared':
        validation_errors += 1
        school_type = 'shared'
    
    # X·ª≠ l√Ω gi√° tr·ªã h·ªçc sinh b·ªã thi·∫øu
    if pd.isna(students):
        students = 0
    
    # T·∫°o marker size (ƒê√É TH√äM KI·ªÇM TRA GI√Å TR·ªä)
    marker_size = max(4, min(12, students / 300 if students > 0 else 6))
    
    # T·∫°o popup content
    popup_content = f"""
    <div style="width: 340px;">
        <h4 style="margin: 0; color: {'orange' if school_type == 'shared' else 'blue'};">{school_name}</h4>
        <hr style="margin: 5px 0;">
        <b>Tr·∫°ng th√°i:</b> {school_type.title()}<br>
        <b>S·ªë h·ªçc sinh:</b> {students:,.0f}<br>
        <b>Thu·ªôc campus:</b> {', '.join(covering_campuses)}<br>
    </div>
    """
    
    # Th√™m v√†o nh√≥m ph√π h·ª£p
    if school_type == 'exclusive':
        campus_code = covering_campuses[0]
        target_group = exclusive_schools_groups[campus_code]
        marker_color = get_campus_color(campus_code)
    else:
        target_group = shared_schools_group
        marker_color = 'orange'
    
    folium.CircleMarker(
        location=[float(lat), float(lon)],
        radius=marker_size,
        color=marker_color,
        fillColor=marker_color,
        weight=2,
        fill=True,
        fillOpacity=0.7,
        popup=folium.Popup(popup_content, max_width=360)
    ).add_to(target_group)
    
    schools_added += 1

print(f"\nüìä VALIDATED SCHOOL MARKERS:")
print(f"   ‚Ä¢ Schools added: {schools_added}")
print(f"   ‚Ä¢ Validation errors: {validation_errors}")

# ... (ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n)